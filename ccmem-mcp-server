#!/usr/bin/env python3

"""
CCMem MCP Server Wrapper for Direct GitHub Installation
Enables: claude mcp add ccmem -- uvx --from git+https://github.com/adestefa/ccmem ccmem-mcp-server
"""

import sys
import subprocess
import os
from pathlib import Path

def detect_runtime():
    """Detect available runtime (bun preferred, node fallback)"""
    try:
        subprocess.run(['bun', '--version'], capture_output=True, check=True)
        return 'bun'
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    
    try:
        subprocess.run(['node', '--version'], capture_output=True, check=True)
        return 'node'
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Error: Neither Bun nor Node.js found. Please install one of:", file=sys.stderr)
        print("  Bun (recommended): curl -fsSL https://bun.sh/install | bash", file=sys.stderr)
        print("  Node.js: https://nodejs.org/", file=sys.stderr)
        sys.exit(1)

def find_server_script():
    """Find the CCMem server script relative to this wrapper"""
    script_dir = Path(__file__).parent
    
    runtime = detect_runtime()
    
    if runtime == 'bun':
        server_script = script_dir / 'server-bun.js'
    else:
        server_script = script_dir / 'server-node.js'
    
    if not server_script.exists():
        # Fallback to any available server
        for candidate in ['server-bun.js', 'server-node.js', 'server.js']:
            candidate_path = script_dir / candidate
            if candidate_path.exists():
                server_script = candidate_path
                runtime = 'bun' if 'bun' in candidate else 'node'
                break
        else:
            print(f"Error: No CCMem server script found in {script_dir}", file=sys.stderr)
            sys.exit(1)
    
    return runtime, server_script

def main():
    """Main entry point for CCMem MCP server"""
    try:
        runtime, server_script = find_server_script()
        
        # Execute the appropriate server
        cmd = [runtime, str(server_script)]
        
        # Pass through all arguments
        cmd.extend(sys.argv[1:])
        
        # Execute and pass through stdin/stdout for MCP communication
        process = subprocess.Popen(
            cmd,
            stdin=sys.stdin,
            stdout=sys.stdout,
            stderr=sys.stderr
        )
        
        # Wait for completion and exit with same code
        sys.exit(process.wait())
        
    except KeyboardInterrupt:
        sys.exit(130)
    except Exception as e:
        print(f"Error starting CCMem server: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()